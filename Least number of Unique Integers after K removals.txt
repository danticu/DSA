class Solution {
    public int findLeastNumOfUniqueInts(int[] arr, int k) {
        HashMap<Integer, Integer> map=new HashMap<>();
        for(int i=0; i<arr.length; i++)//-->S.C--O(N)
        {
            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
        }
        PriorityQueue<Integer> pq=new PriorityQueue<>((a, b)-> map.get(a)-map.get(b));//--->S.C--O(N)
        pq.addAll(map.keySet());//--T.C-->O(N log N)
        while(k>0 && pq.size()>0)//---> T.C--O(N log N)
        {
            int ele=pq.poll();//-->T.C--->O(log N)
            int freq=map.get(ele);
            if(k>=freq)
            {
                k=k-freq;
            }
            else
            {
                pq.add(ele);
                break;
            }
        }
        //Time complexity: O(N+ N log N), when number of unique elements is at most M=N
        //Space complexity: O(n)
    
        return pq.size();
    }
}